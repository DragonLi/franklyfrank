data Zero =.

data List a = Nil  : (List a)
            | Cons : a -> (List a) -> (List a).

append : (List a) -> (List a) -> (List a)
append Nil         ys = ys;
append (Cons x xs) ys = Cons x (append xs ys);

interface Choice = choice : Bool.
interface Fail   = fail : Zero.

cond : Bool -> {[]a} -> {[]a} -> a
cond true t e  = t!;
cond false t e = e!;

choose : a -> a -> [Choice]a
choose x y = cond (choice!) ({x}) ({y});

allResults : [Choose, Failure]a -> List a
allResults x             = Cons x Nil;
allResults [choice -> k] = append (choose (k true)) (choose (k false));
allResults [fail -> k]   = Nil;

data Toss = Heads : Toss
          | Tails : Toss.

drunkToss : [Choose, Failure]Toss
drunkToss = cond (choice!) ({choose Heads Tails}) ({fail});

main : (List Toss)
main = allResults (drunkToss!); 
