data Nat = zero : Nat
         | suc : {[]Nat -> []Nat}.

data List X = nil : List | cons : {[]X -> []List -> []List}.

append : (List X) -> (List X) -> (List X)
append nil         ys = ys;
append (cons x xs) ys = cons x (append! xs ys);

interface State X = get : X | put : {[]S -> []Unit}.

interface Receive X = receive : X.

fmap : {A -> B} -> List -> List
fmap f nil = nil;
fmap f (cons x xs) = cons (f! x) (fmap! f xs);

bind : X -> {X -> Y} -> Y
bind x f = f! x;

catter : [Receive (List X)](List X)
catter = bind! (receive!) ({ nil -> nil | xs -> append! xs (catter!) });
