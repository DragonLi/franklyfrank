data Nat = zero : Nat
         | suc : Nat -> Nat.

data List X = nil  : (List X)
            | cons : X -> (List X) -> (List X).

append : (List X) -> (List X) -> (List X)
append nil         ys = ys;
append (cons x xs) ys = cons x (append! xs ys);

plus : Nat -> Nat -> Nat
plus zero m = m;
plus (suc n) m = suc (plus! n m);

interface State X = get : X | put : S -> Unit.

interface Receive X = receive : X.

fmap : {A -> B} -> List -> List
fmap f nil = nil;
fmap f (cons x xs) = cons (f! x) (fmap! f xs);

bind : X -> {X -> Y} -> Y
bind x f = f! x;

catter : [Receive (List X)](List X)
catter = bind! (receive!) ({ nil -> nil | xs -> append! xs (catter!) });

runState : X -> [State X]Y    -> Y
runState   x    [put x' -> k] =  runState! x' (k! unit);
runState   x    [get    -> k] =  runState! x  (k! x);
runState   x          x       =  x;
