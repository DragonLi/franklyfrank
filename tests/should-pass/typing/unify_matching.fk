data List x = Nil  : x
            | Cons : x -> (List x) -> (List x).

interface Receive z = receive : z.

append : (List x) -> (List x) -> (List x).
append Nil          ys = ys.
append (Cons ax xs) ys = Cons ax (append xs ys).

bind : x -> {x -> y} -> y.
bind bx f = f bx.

{- This version requires unification to be performed at pattern matching. -}
inlinedCatter : [Receive (List x)](List x).
inlinedCatter = bind (receive!) { Nil -> Nil
                                | cxs -> append cxs (inlinedCatter!)}.
{- -}

main : Bool.
main = true.
