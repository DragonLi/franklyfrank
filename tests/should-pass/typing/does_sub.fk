data Zero=.

interface Send x = send : x -> Unit.

interface Abort = aborting : Zero.

bind : x -> {x -> y} -> y.
bind x f = f x.

abort : [Abort]x.
abort = bind (aborting!) {}.

pats : [Send x]a      -> [Abort]a.
pats      [t]         = pats (t!). {- NB: makes pats non-terminating -}
pats   [send x -> k]  = pats (k Unit).
pats    x             = x.

suspat : {[Send x]a}    -> [Abort]a.
suspat       m           = pats (m!).

addAbort : a -> [Abort]a.
addAbort x = x.

eatAbort : [Abort]a -> a.
eatAbort x   = x.
eatAbort [t] = eatAbort (t!).

foo : {a} -> [Abort]a.
foo m = addAbort (m!).

bar : {a} -> a.
bar m = eatAbort (foo m).

baz : {[Abort]Int}.
baz = bind {abort!} {x -> x}.

main : Int.
main = 0.
