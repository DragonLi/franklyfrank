{- standard stuff -}
bind : a -> {a -> b} -> b.
bind x f = f x.

cond : Bool -> {a} -> {a} -> a.
cond true  t e = t!.
cond false t e = e!.

maximum : Int -> Int -> Int.
maximum m n = cond (gt m n) {m} {n}.

minimum : Int -> Int -> Int.
minimum m n = cond (gt m n) {n} {m}.

lt : Int -> Int -> Bool.
lt m n = gt n m.

or : Bool -> Bool -> Bool.
or true  _     = true.
or _     true  = true.
or false false = false.

mod : Int -> Int -> Int.
mod 0 n = 0.
mod m n = cond (gt m n) {mod (minus m n) n} {m}.

data Zero =.

data Maybe a = Nothing :      Maybe a
             | Just    : a -> Maybe a.

data List a = Nil  :                List a
            | Cons : a -> List a -> List a.

map : {a -> b} -> List a -> List b.
map f Nil         = Nil.
map f (Cons x xs) = Cons (f x) (map f xs).

filter : {a -> Bool} -> List a -> List a.
filter p Nil         = Nil.
filter p (Cons x xs) = cond (p x) {Cons x (filter p xs)} {filter p xs}.

length : List a -> Int.
length Nil         = 0.
length (Cons x xs) = plus 1 (length xs).

zip : List a -> List b -> List (Pair a b).
zip Nil         _           = Nil.
zip _           Nil         = Nil.
zip (Cons x xs) (Cons y ys) = Cons (Pair x y) (zip xs ys).

elemIndex' : {a -> a -> Bool} -> Int -> a -> List a -> Maybe Int.
elemIndex' eq _ _ Nil         = Nothing.
elemIndex' eq i z (Cons x xs) = cond (eq z x) {Just i} {elemIndex' eq (plus i 1) z xs}.

elemIndex : {a -> a -> Bool} -> a -> List a -> Maybe Int.
elemIndex eq z xs = elemIndex' eq 0 z xs.

range : Int -> Int -> List Int.
range m n = cond (gt m n) {Nil} {Cons m (range (plus m 1) n)}.


data Pair a b = Pair : a -> b -> Pair a b.
{- end of standard stuff -}


{-
Nim game (https://en.wikipedia.org/wiki/Nim)
This example is adapted from Kammar et al. (2013)
(https://github.com/slindley/effect-handlers)

A game begins with n sticks on the table. The game has two players: Alice and Bob.
Alice goes first. Alice takes between one and three sticks, then it is Bob's turn
and similary Bob takes between one and three sticks. They alternate turns until
there are no more sticks left. The player, who takes the last stick, wins.
-}

{- The game -}
data Player = Alice : Player
            | Bob   : Player.

eqPlayer : Player -> Player -> Bool.
eqPlayer Alice Alice = true.
eqPlayer Bob   Bob   = true.
eqPlayer _     _     = false.

showPlayer : Player -> String.
showPlayer Alice = "Alice".
showPlayer Bob   = "Bob".

{-
The Game interface provides a single 'move' command, which 
represents a move by a player in the game. The
two parameters are a player and the number of sticks
remaining. The return value is the number of sticks the player
chooses to take.
-}
interface Game = move : Player -> Int -> Int.

{-
We model the rules of the game as an abstract computation over the
Game interface that returns the winner.

a game is parameterised by the number of starting sticks
-}
game : Int -> [Game]Player.
game n = aliceTurn n.

aliceTurn : Int -> [Game]Player.
aliceTurn 0 = Bob.
aliceTurn n = bobTurn (minus n (move Alice n)).

bobTurn : Int -> [Game]Player.
bobTurn 0 = Alice.
bobTurn n = aliceTurn (minus n (move Alice n)).

{-
Note that this implementation does not check that each player takes
between one and three sticks on each turn. We will add such a check
later.
-}

{- Strategies -}

{- construct a handler that assigns strategy s p to player p -}
strategy : {Player -> Int -> {Int -> r} -> r} -> [Game]r -> r.
strategy s x               = x.
strategy s [move p n -> k] =
  s p n {x -> strategy s (k x)}.

{- naive strategy: always pick one stick -}
ns : Int -> {Int -> r} -> r.
ns n k = k 1.

{- perfect strategy -}
ps : Int -> {Int -> r} -> r.
ps n k = k (maximum (mod n 4) 1).

{- both players adopt a naive strategy -}
nn : Int -> Player.
nn n = strategy {_, n, k -> ns n k} (game n).

{- both players adopt a perfect strategy -}
pp : Int -> Player.
pp n = strategy {_, n, k -> ps n k} (game n).

data MoveTree = Take   : Player -> List (Pair Int MoveTree) -> MoveTree
              | Winner : Player ->                             MoveTree.

{- list of valid moves given n sticks remaining -}
validMoves : Int -> List Int.
validMoves n = range 1 (minimum 3 n).

{- brute force strategy: enumerate all possible moves -}
bfs : Player -> Int -> {Int -> Player} -> Player.
bfs player n k =
  bind (map k (validMoves n)) {winners ->
  bind (elemIndex eqPlayer player winners) { Nothing  -> k 1
                                           | (Just i) -> k (plus i 1)}}.

{- Alice perfect vs Bob brute force -}
bp : Int -> Player.
bp n = strategy { Alice, n, k -> ps      n k
                | Bob,   n, k -> bfs Bob n k} (game n).

{-
Instead of simply evaluating the winner according to some strategy,
we can also compute other data. For instance, we can compute a tree
representing the possible moves of each player.
-}

{- reify a move as part of the move tree -}
reifyMove : Player -> Int -> {Int -> MoveTree} -> MoveTree.
reifyMove player n k =
  bind (map k (validMoves n))               {moves ->
  bind (zip (range 1 (length moves)) moves) {subgames ->
  Take player subgames}}.

{- complete move tree generator -}
mtGen : [Game]Player -> MoveTree.
mtGen x               = Winner x.
mtGen [move p n -> k] = reifyMove p n {x -> mtGen (k x)}.

mt : Int -> MoveTree.
mt n = mtGen (game n).

{- Generate a move tree for Alice in anticipation of combining it with
a strategy for Bob -}
aliceTree : [Game]Player -> [Game]MoveTree.
aliceTree x                   = Winner x.
aliceTree [move Alice n -> k] = reifyMove Alice n {x -> aliceTree (k x)}.
aliceTree [move Bob   n -> k] =
  bind (move Bob n) {take -> Take Bob (Cons (Pair take (aliceTree (k take))) Nil)}.

{-
We reuse the perfect vs perfect handler; it only ever gets to
handle Move(Bob, n) even though it is defined for Move(Alice, n) as
well.
-}
mp : Int -> MoveTree.
mp n = strategy {_, n, k -> ps n k} (aliceTree (game n)).


{-- Cheating --}
interface Cheat = cheat : Player -> Int -> Zero.

{-
cheating p m is invoked when player p cheats by attempting to take
m sticks (for m < 1 or 3 < m)
-}
cheating : Player -> Int -> [Cheat]a.
cheating p m = bind (cheat p m) {}.

checkMove : Player -> Int -> {Int -> r} -> [Game, Cheat]r.
checkMove player n k =
  bind (move player n) {take ->
  cond (or (lt take 1) (lt 3 take))
    {cheating player take} {- cheater detected -}
    {k take}}.


check : [Game]r -> [Game, Cheat]r.
check x                    = x.
check [move player n -> k] = checkMove player n {x -> check (k x)}.

checkedGame : Int -> [Cheat, Game]Player.
checkedGame n = check (game n).

{-
A cheating strategy: take all of the sticks, no matter how many
remain
-}
cheater : Int -> {Int -> r} -> r.
cheater n k = k n.

{- Alice cheats against Bob's perfect strategy -}
aliceCheats : {[Game]r} -> r.
aliceCheats game = strategy { Bob,   n, k -> ps n k
                            | Alice, n, k -> cheater n k} (game!).

{- in an unchecked game Alice always wins -}
cpUnchecked : Int -> Player.
cpUnchecked n = aliceCheats {game n}.

interface Error = anError : String -> Zero.

error : String -> [Error]a.
error s = bind (anError s) {}.

displayErrors : [Error]a -> [Console]Maybe a.
displayErrors x                = Just x.
displayErrors [anError s -> k] = bind (putStrLn s) {_ -> Nothing}.

{- if a player cheats then halt the game with an error -}
cheatReport : [Cheat]a -> [Error]a.
cheatReport x                    = x.
cheatReport [cheat Alice n -> k] = error "Alice Cheated".
cheatReport [cheat Bob   n -> k] = error "Bob Cheated".

{- if a player cheats then the opponent wins immediately -}
cheatLose : [Cheat]Player -> Player.
cheatLose x                    = x.
cheatLose [cheat Alice n -> k] = Bob.
cheatLose [cheat Bob n -> k]   = Alice.

{-
Alice cheats against Bob's perfect strategy

(If n < 4 then Alice wins, otherwise the game is abandoned because
Alices cheats.)
-}
cpReport : Int -> [Console]Maybe Player.
cpReport n = displayErrors (cheatReport (aliceCheats {checkedGame n})).

{-
Alice cheats against Bob's perfect strategy

(If n < 4 then Alice wins, otherwise Bob wins because Alice
cheats.)
-}
cpLose : Int -> Player.
cpLose n = cheatLose (aliceCheats {checkedGame n}).

main : Player.
main = pp 20.

{-
main : Player.
main = bp 20.
-}

{-
main : MoveTree.
main = mt 3.
-}

{-
main : MoveTree.
main = mp 3.
-}

{-
main : [Console]Maybe Player.
main = cpReport 5.
-}

{-
main : Player.
main = cpLose 5.
-}
