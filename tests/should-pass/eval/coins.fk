data Maybe a = Nothing :      Maybe a
             | Just    : a -> Maybe a.

data List a = Nil  :                List a
            | Cons : a -> List a -> List a.

data Zero =.

append : List a -> List a -> List a.
append Nil         ys = ys.
append (Cons x xs) ys = Cons x (append xs ys).

interface Choice = choice : Bool.
interface Fail   = fail : Zero.

cond : Bool -> {a} -> {a} -> a.
cond true  t e = t!.
cond false t e = e!.

choose : a -> a -> [Choice]a.
choose x y = cond (choice!) {x} {y}.

{- Define a failure handler which can be instantiated to any type. -}
{- Is there an alternative definition which doesn't use bind? -}
bind : x -> {x -> y} -> y.
bind x f = f x.

failure : [Fail]a.
failure = bind (fail!) {}.

allResults : [Choice, Fail]a -> List a.
allResults x             = Cons x Nil.
allResults [choice -> k] =
    append (allResults (k true)) (allResults (k false)).
allResults [fail -> k]   = Nil.

data Toss = Heads : Toss
          | Tails : Toss.

toss : [Choice, Fail]Toss.
toss = choose Heads Tails.

{- Use the failure handler instead of the fail command here. -}
drunkToss : [Choice, Fail]Toss.
drunkToss = cond (choice!) toss failure.

drunkTosses : Int -> [Choice, Fail]List Toss.
drunkTosses 0 = Nil.
drunkTosses n = Cons (drunkToss!) (drunkTosses (minus n 1)).

maybeResult : [Fail]a -> Maybe a.
maybeResult x           = Just x.
maybeResult [fail -> k] = Nothing.

persevere' : {[Fail]a} -> [Fail]a     -> a.
persevere'       m           x         = x.
persevere'       m       [fail -> k]   = persevere' m (m!).

persevere : [Fail]a -> a.
persevere     [m]    = persevere' m (m!).


interface Rand = rand : Float.

randomResult : [Choice]a -> [Rand]a.
randomResult x             = x.
randomResult [choice -> k] = bind (gtf (rand!) 0.5) {x -> randomResult (k x)}.
                             {-randomResult (k (gtf (rand!) 0.5)).-}

handleRandom : [Rand]a -> [Random]a.
handleRandom x           = x.
handleRandom [rand -> k] = bind (random!) {x -> handleRandom (k x)}.
{-handleRandom [rand -> k] = handleRandom (k (random!)).-}

sampleMaybe : [Choice, Fail]a -> [Random]Maybe a.
sampleMaybe m = handleRandom (maybeResult (randomResult m)).

sample : [Choice, Fail]a -> [Random]a.
sample m = handleRandom (persevere (randomResult m)).

{-
main : List (List Toss).
main = allResults (drunkTosses 3).
-}

main : [Random]Maybe (List Toss).
main = sampleMaybe (drunkTosses 3).
