{- Testing out comments. -}
data Nat = Zero : Nat
         | Suc : Nat -> Nat.

data List x = Nil  : List x
            | Cons : x -> List x -> List x.

append : List x -> List x -> List x.
append Nil         ys = ys.
append (Cons x xs) ys = Cons x (append xs ys).

{-
plus [?c -> k] [t] = let x = c! in plus (k! x) t!
plus [t] [?c -> k] = let x = c! in plus t! (k! x)

# plus (h (suc zero)) zero
# -->
# plus comp zero


-}

interface State x = get : x | put : x -> Unit.

interface Receive x = receive : x.

fmap : {a -> b} -> List a -> List b.
fmap       f        Nil     = Nil.
fmap       f    (Cons x xs) = Cons (f x) (fmap f xs).

bind : x -> {x -> y} -> y.
bind x f = f x.

{- {- {- p[ef[##'####'##esaojdknsafoewowowo {{{{{a-
pi : {[]Int}
pi = 3.142 ##~~~ Ã¼
-}
g x y = x + y

f x = { y -> plus x y }
-}
main = {f! 42}
-}

main : Int.
main = 0.
