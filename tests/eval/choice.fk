bind : x -> {x -> y} -> y.
bind m f = f m.

data List a = Nil  : List a
            | Cons : a -> List a -> List a.

data Zero =.

append : List a -> List a -> List a.
append Nil         ys = ys.
append (Cons x xs) ys = Cons x (append xs ys).

interface Choice = choice : Bool.
interface Fail   = fail : Zero.

cond : Bool -> {a} -> {a} -> a.
cond true t e  = t!.
cond false t e = e!.

choose : a -> a -> [Choice]a.
choose x y = cond (choice!) {x} {y}.

allResults : [Choice, Fail]a -> List a.
allResults x             = Cons x Nil.
allResults [choice -> k] = append (allResults (k true)) (allResults (k false)).
allResults [fail -> k]   = Nil.

data Toss = Heads : Toss
          | Tails : Toss.

toss : [Choose, Failure]Toss.
toss = choose Heads Tails.

drunkToss : [Choose, Failure]Toss.
drunkToss = cond (choice!) toss fail.

drunkTosses : Int -> [Choose, Failure]List Toss.
drunkTosses 0 = Nil.
drunkTosses n = bind (drunkToss!) {x -> Cons x (drunkTosses (minus n 1))}.

main : List Bool.
main = allResults (drunkTosses 3).
