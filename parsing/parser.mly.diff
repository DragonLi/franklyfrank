diff --git a/parsing/parser.mly b/parsing/parser.mly
index 97b0571..f7bd00c 100644
--- a/parsing/parser.mly
+++ b/parsing/parser.mly
@@ -18,10 +18,9 @@
 %token <string> ID
 %token INTERFACE
 %token <int> INTLIT
-%token LARROW
+%token RARROW
 %token LBRACE LBRACKET LPAREN
 %token RBRACE RBRACKET RPAREN
-%token SEMI
 %token TRUE
 %token <string> UID
 %token UNDERSCORE
@@ -37,10 +36,10 @@ program:
 term:
   | DATA UID opt_type_parameters EQUAL opt_constructor_decls DOT
       { Datatype.mk $2 ~params:$3 ~ctrs:$5 () |> Term.datatype }
-  | ID COLON top_level_value_type { ValueDecl.mk $1 $3 |> Term.value_decl }
+  | ID COLON top_level_value_type DOT { ValueDecl.mk $1 $3 |> Term.value_decl }
   | INTERFACE ident opt_type_parameters EQUAL effect_signatures DOT
       { EffInterface.mk $2 ~params:$3 ~sigs:$5 () |> Term.effect_in }
-  | ID pattern* EQUAL checkable_computation SEMI
+  | ID pattern* EQUAL checkable_computation DOT
       { ValueDefn.mk $1 ~pats:$2 $4 |> Term.value_defn }
   ;
 
@@ -64,7 +63,7 @@ pat_checkable_computation:
   ;
 
 pat_match_computation:
-  | separated_nonempty_list(COMMA, pattern) LARROW
+  | separated_nonempty_list(COMMA, pattern) RARROW
       pat_checkable_computation { CComputation.clause $1 $3 }
   ;
 
@@ -85,7 +84,7 @@ checkable_value:
 paren_checkable_value:
   | paren_inferable_value        { CValue.ivalue $1 }
   | paren_value_constructor      { $1 }
-  | LPAREN suspended_computation RPAREN  { CValue.sus_comp $2 }
+  | suspended_computation        { CValue.sus_comp $1 }
   ;
 
 inferable_value:
@@ -105,7 +104,7 @@ paren_inferable_value:
   ;
 
 inferable_computation:
-  | inferable_value BANG        { IComp.app $1 () }
+  | inferable_value BANG list(paren_checkable_computation) { IComp.app $1 ~args:$3 () }
   | paren_inferable_value nonempty_list(paren_checkable_computation)
       { IComp.app $1 ~args:$2 () }
   ;
@@ -130,20 +129,20 @@ pattern:
   ;
 
 value_pattern:
-  | ID                                    { Pattern.var $1 }
-  | UID                                   { Pattern.ctr $1 () }
-  | INTLIT                                { Pattern.integer $1 }
-  | TRUE                                  { Pattern.boolean true }
-  | FALSE                                 { Pattern.boolean false}
+  | ID                                     { Pattern.var $1 }
+  | UID                                    { Pattern.ctr $1 () }
+  | INTLIT                                 { Pattern.integer $1 }
+  | TRUE                                   { Pattern.boolean true }
+  | FALSE                                  { Pattern.boolean false}
   | LPAREN UID value_pattern+ RPAREN       { Pattern.ctr $2 ~pats:$3 () }
   ;
 
 comp_pattern:
-  | ID value_pattern* LARROW ID    { Pattern.request $1 ~pats:$2 $4 }
-  | ID BANG                        { Pattern.thunk $1 }
+  | ID value_pattern* RARROW ID            { Pattern.request $1 ~pats:$2 $4 }
+  | ID BANG                                { Pattern.thunk $1 }
 
 opt_type_parameters:
-  | ps = list(value_type)      { ps }
+  | ps = value_types                       { ps }
   ;
 
 type_variable:
@@ -168,7 +167,7 @@ effect_signature:
 
 sig_args:
   | sig_arg                                { [$1] }
-  | sig_args LARROW sig_arg                { $3 :: $1 }
+  | sig_args RARROW sig_arg                { $3 :: $1 }
   ;
 
 sig_arg:
@@ -201,46 +200,65 @@ constructor_decl:
 
 constructor_args:
   | constructor_arg                         { [$1] }
-  | constructor_args LARROW constructor_arg { $3 :: $1 }
+  | constructor_args RARROW constructor_arg { $3 :: $1 }
 
 constructor_arg:
-  | type_variable                          { $1 }
-  | datatype                               { $1 }
+  | type_variable                           { $1 }
+  | datatype                                { $1 }
   ;
 
 bar_constructor_decl:
-  | BAR constructor_decl                   { $2 }
+  | BAR constructor_decl                    { $2 }
   ;
 
 top_level_value_type:
-  | value_type                             { $1 }
-  | computation_types                      { TypExp.sus_comp $1 }
+  | computation_type                        { TypExp.sus_comp $1 }
   ;
 
 value_type:
-  | type_variable                          { $1 }
-  | datatype                               { $1 }
-  | LBRACE computation_types RBRACE        { TypExp.sus_comp $2 }
+  | LPAREN value_type RPAREN                { $2 }
+  | type_variable                           { $1 }
+  | datatype                                { $1 }
+  | LBRACE computation_type RBRACE          { TypExp.sus_comp $2 }
   ;
 
 datatype:
-  | UID                           { TypExp.ctr $1 [] }
-  | LPAREN UID value_type+ RPAREN { TypExp.ctr $2 $3 }
+  | UID value_types                         { TypExp.ctr $1 $2 }
   ;
 
-computation_types:
-  | returner                               { $1 }
+paren_value_type:
+  | LPAREN paren_value_type RPAREN          { $2 }
+  | type_variable                           { $1 }
+  | paren_datatype                          { $1 }
+  | LBRACE computation_type RBRACE          { TypExp.sus_comp $2 }
+  ;
+
+paren_datatype:
+  | UID                                     { TypExp.ctr $1 [] }
+  | LPAREN UID non_empty_value_types RPAREN { TypExp.ctr $2 $3 }
+  ;
+
+non_empty_value_types:
+  | paren_value_type+                       { $1 }
+  ;
+
+value_types:
+  | list(paren_value_type)                  { $1 }
+  ;
+
+computation_type:
+  | arg                               { $1 }
   | rargs = arrow_type
         { match rargs with
-	  | [] -> raise (SyntaxError ("Expecting function type"))
+          | [] -> raise (SyntaxError ("Expecting function type"))
                   (* Impossible *)
-	  | res :: sgra -> TypExp.comp (List.rev sgra) res
-	}
+          | res :: sgra -> TypExp.comp (List.rev sgra) res
+        }
   ;
 
 arrow_type:
-  | arg LARROW arg                         { [$1 ; $3] }
-  | arrow_type LARROW arg                  { $3 :: $1  }
+  | arg RARROW arg                         { [$1 ; $3] }
+  | arrow_type RARROW arg                  { $3 :: $1  }
   ;
 
 arg:
